#include "TextTraining.h"
#include <iostream>
#include <iomanip>
#include <stdio.h>
#include <chrono>
#include <conio.h>
#include "ConsoleInterface.h"
#include "TextLoader.h"
#include <string>

using namespace std;
using namespace chrono;

/*
	Функція виводу меню в консоль
*/
const static string SENTENCES[] = { "Як умру, то поховайте Мене на могилі Серед степу широкого На Вкраїні милій, Щоб лани широкополі, І Дніпро, і кручі Було видно, було чути, Як реве ревучий.",
									"Ти одна заложила єму серцю позов на вічнії роки, і душа моя єжечасно волаєть тебе і послі нишпорной даже години.",
									"Боже ж мій, Боже! скільки я літ працювала, скільки нічок недоспала, думок передумала, здоров'я вкоротила, поки сього добра наскладала!",
									"Сорок літ я трудився, навчав, Весь заглиблений в тобі, Щоб з рабів тих зробили народ По твоїй уподобі.",
									"Якщо немає націоналізму, немає нації, я так до цього ставлюся. Націоналізм має бути не агресивний, він повинен бути дипломатичний, інтелігентний.",
									"Коли поміж хлібом і свободою народ обирає хліб, він зрештою втрачає все, в тому числі і хліб. Якщо народ обирає свободу, він матиме хліб, вирощений ним самим і ніким не відібраний.",
									"Не жаль мені, що я тебе кохаю, Та в нас дороги різно розійшлись. Ні, не кажи, що зійдуться колись! Не зійдуться, мій друже, я те знаю.",
									"Малоросійство – це не політика і навіть не тактика, лише завжди апріорна і тотальна капітуляція.",
									"Україна в ЄС — це смерть російського імперського проєкту. До того ж це потужний удар по російському авторитаризму, шлях до демократичних змін в Росії та на всьому пострадянському просторі.",
									"Мене це хвилює. Дивіться, ми підтримуємо територіальну цілісність України, ми підтримуємо їхню здатність управляти своєю державою.",
									"Думи мої, думи мої, Лихо мені з вами! Нащо стали на папері Сумними рядами?",
									"Я бачив дивний сон. Немов передо мною Безмiрна, та пуста, i дика площина I я, прикований ланцем залiзним, стою Пiд височенною гранiтною скалою, А далi тисячi таких самих, як я.",
									"Гетьте, думи, ви, хмари осінні! То ж тепера весна золота! Чи то так у жалю, в голосінні Проминуть молодії літа?",
									"Якщо прийде журба, то не думай її Рознести у веселощах бучних За столом, де веселії друзі твої П’ють-гуляють при покликах гучних.",
									"Як-таки за таким і таким ділом ходити, як-таки так і так думати! Чи се ж гоже? Як-таки такому чоловікові се і те збиратися робити?",
									"Iще ж i се ми думаємо, що як постигне кого-небудь бiда i нещастя, що похова кого iз своєї сiм'ї або i родичiв, то буцiмто сеє чоловiковi приходить за його грiхи й неправди прежнiї. Нi, не так сеє!",
									"А коли треба, то й поперечний! Трандалєв. Поперечних не полагається. Ви заспокойтесь, уголовна палата одмінить рішеніє - ми виграємо діло.",
									"Не знає свого щастя; сказано: молоде - дурне... Ох, діти-діти! Якби ви знали, як-то хочеться бачить вас хорошими людьми, щоб ви не черствий хліб їли.",
									"Я завжди мріяв написати пісню про маму, але різні поети всі слова вже сказали. І я не хотів повторити когось із них.",
									"Цей сон, цей сон Мені щоночі сниться Крізь сон, крізь сон Вона мені сміється Цей сон, цей сон Мене не покидає Любов, о сон Вона мене кохає.",
									"Ох, не хотів би буть я на вашому місці Хоч і на своєму страшно, тут в когось порожньо в мисці Не чекали вас ніде тут: ні в селі, ні в місті Орки, ваші руки брудні, навіть коли руки чисті.",
									"Ти так давно всі двері зачинила, Що думав я промокну під дощем, А ти така солодка, моя мила, У мене в серці знов приємний щем!",
									"А ми з москалями та й не в згоді жили, На самого Петра у бій ми вступили Москалі тікали, аж лапті губили, А наші за ними постріли били.",
									"Все те, що буде зроблене проти, на твою ж таки голову і впаде. За здобутком завжди втрата простує.",
									"Краси перемагати не повинна. Не гідна ти дочкою лісу зватись! бо в тебе дух не вільний лісовий, а хатній рабський!" };


/*
	Функція виводу роботи з меню тренування
*/
void TextTraining::printMenu() {
	cout << "--------------------------------------------------------------------------" << endl;
	cout << "| Наступне тренування включає тренування на введення тексту. Після поча- |" << endl;
	cout << "| тку на кожне речення буде відведений певний час, який зменшується при  |" << endl;
	cout << "| при кожному наступному введені.                                        |" << endl;
	cout << "|                                                                        |" << endl;
	cout << "| УВАГА! В цьому режимі після введення кожного речення не потрібно нати- |" << endl;
	cout << "| скати Enterдля підтвердження вводу речення. Також в даному режимі виво-|" << endl;
	cout << "| диться текст набраного речення. Не намагайтеся виправити неправильний  |" << endl;
	cout << "| текст, оскільки це буде зараховано як наступну помилку, тому продовжу- |" << endl;
	cout << "| йте вводити наступні літери.                                           |" << endl;
	cout << "|                                                                        |" << endl;
	cout << "| Виберіть опцію меню:                                                   |" << endl;
	cout << "| (1) Почати тренування з простими реченням                              |" << endl;
	cout << "| (2) Вибрати текст для тренування з файлу                               |" << endl;
	cout << "| (3) Вийти з тренування                                                 |" << endl;
	cout << "| (0) Завершити виконання програми                                       |" << endl;
	cout << "--------------------------------------------------------------------------" << endl;
}

/*
	Функція виводу меню для тренування з творами
*/
void TextTraining::printTrainingWithTextsMenu() {
	cout << "--------------------------------------------------------------------------" << endl;
	cout << "| Виберіть опцію меню:                                                   |" << endl;
	cout << "| (1) Тренування з твором 'Батьківщина', О. Довгий                       |" << endl;
	cout << "| (2) Тренування з твором 'Блакить мою душу обвіяла', П. Тичина          |" << endl;
	cout << "| (3) Тренування з твором 'Contra spem spero', Леся Українка             |" << endl;
	cout << "| (4) Тренування з твором 'Маленька Вкраїночка', І. Тучак                |" << endl;
	cout << "| (5) Тренування з твором 'Реве та стогне дніпр широкий', Т.Шевченко     |" << endl;
	cout << "| (6) Тренування з твором 'Заповіт', Т.Шевченко                          |" << endl;
	cout << "| (7) Тренування з твором 'Життя', Д.Веневітінов                         |" << endl;
	cout << "| (8) Тренування з твором 'Я життя не боюся', В.Стус                     |" << endl;
	cout << "| (9) Вийти з тренування                                                 |" << endl;
	cout << "| (0) Завершити виконання програми                                       |" << endl;
	cout << "--------------------------------------------------------------------------" << endl;
}

/*
	Функція початку роботи з меню тренування
*/
void TextTraining::openTraining() {
	system("CLS"); // очистити консоль
	while (true) {
		printMenu(); // вивести меню-підказку
		int input = ConsoleInterface::getIntInput(0, 3);
		switch (input) {
		case 1: // почати тренування з простими реченням
			startTraining();
			break;
		case 2: // почати тренування з творами
			startTrainingWithTexts();
			break;
		case 3: // повернутися до попереднього меню 
			system("CLS");
			return;
		case 0: // завершити роботу програми
			exit(0);
		}
	}
}

/*
	Функція початку тренування з реченнями
*/
void TextTraining::startTraining() {
	cout << "Введіть кількість комбінацій для тренування в межах [1;25] (Рекомендовано не більше 10)" << endl;
	int sentence_count = ConsoleInterface::getIntInput(1, 25); // кількість комбінацій
	int inputs = 0; // кількість введних речень
	int matched_chars = 0; // кількість правильно введених речень
	int total_chars = 0; // загальна кількість символів
	char input_char; // введений символ
	string input; // введена комбінація 
	string generated; // згенероване речення
	long long time_to_enter = 20000; // початковий час на введення 20 секунд
	long long spent_time; // витрачений час на введення речення
	long long total_enter_time = 0; // загальний час вводу всіх речень
	long long additional_time;
	bool previous_match = false; // для перевірки чи попередній ввід був правильний
	bool on_time = false; // для перевірки чи попередній ввід був вчасний
	do {
		system("CLS"); // очистити консоль
		srand(time(NULL));
		if (total_chars != 0) { // якщо не перший ввід (при першому вводі загальна кількість букв == 0)
			if (on_time) { // якщо вчасно
				if (previous_match) { // якщо правильний ввід
					cout << "Попереднє введення: ПРАВИЛЬНО" << endl;
				}
				else { // вчасно, неправильний ввід
					cout << "Попереднє введення: НЕПРАВИЛЬНО" << endl << "введено:" << input << endl << "очікувалося: " << generated << "'" << endl;
				}
			}
			else { // якщо невчасно
				cout << "Попереднє речення було введено невчасно, витрачено " << spent_time << ", дозволено " << time_to_enter / 0.95 << endl;
			}
		}
		else { // якщо перший ввід 
			cout << endl;
		}
		generated = getRandText(); // отримати текст
		input = "\0"; // для занулення попереднього введеного тексту
		cout << "Введіть речення: '" << endl << generated << "'" << endl; // вивести підказку та комбінацію

		high_resolution_clock::time_point before = high_resolution_clock::now(); // запам'ятати час до введення
		for (size_t i = 0; i < generated.length(); ++i) { // введення комбінації
			input_char = _getch(); // отримати наступний символ з консолі
			input += input_char; // додати до поточного введеня комбінації введений символ
			cout << input_char; // вивести введений символ
		}
		++inputs; // збільшити кількість введень
		high_resolution_clock::time_point after = high_resolution_clock::now(); // запам'ятати час після введення

		spent_time = floor<milliseconds>(after - before).count(); // порахувати час введення
		total_enter_time += spent_time; // збільшити загальний час введення

		if (generated.length() > 170) { // якщо в реченні к-сть символів більше 170, збільшити додатковий час на 15 сек.
			additional_time = 15000;
		}
		else if (generated.length() > 135) { // якщо в реченні к-сть символів більше 135, збільшити додатковий час на 10 сек.
			additional_time = 10000;
		}
		else if (generated.length() > 100) { // якщо в реченні к-сть символів більше 100, збільшити додатковий час на 5 сек.
			additional_time = 5000;
		}
		else { // в іншому випадку, встановити додатковий час 0 сек.
			additional_time = 0;
		}
		if (time_to_enter + additional_time > spent_time) { // якщо вчасно введено
			on_time = true; // встановити прапорець чи вчасний ввід true
			previous_match = true; // встановити прапорець чи правильний ввід true
			for (int i = 0; i < generated.length(); ++i) { // перевірити співпадіння кожного символу
				if (input[i] == generated[i]) { // якщо символи однакові
					++matched_chars; // збільшити лічильник правильно введених букв на 1
				}
				else { // якщо символи різні
					previous_match = false; // встановити прапорець чи правильний ввід false
				}
			}
		}
		else { // встановити прапорець чи вчасний ввід false
			on_time = false;
		}
		total_chars += generated.length(); // збільшити загальну кількість введених символів
		time_to_enter *= 0.95; // зменшити час на введення на 5%
	} while (inputs < sentence_count); // робити до тих пір, поки кількість введень не досягне 15

	Training::printResults(matched_chars, total_chars, total_enter_time); // вивести результати
}

/*
	Функція початку тренування з творами
*/
void TextTraining::startTrainingWithTexts() {
	printTrainingWithTextsMenu(); // вивести меню-підказку на екран
	int choice = ConsoleInterface::getIntInput(0, 9); // ввести опцію
	if (choice == 0) { // якщо 0, повернутися до попереднього меню
		return;
	}
	else if (choice == 9) { // якщо 9, вийти з програми
		exit(0);
	}
	ifstream text_file = TextLoader::openText(choice); // отримати та відкрити файл твору
	int matched_chars = 0; // кількість правильно введених речень
	int total_chars = 0; // загальна кількість символів
	char input_char; // введений символ
	string input; // введене речення 
	string next_sentence; // наступне речення з твору
	long long time_to_enter; // початковий час на введення (залежить від довжини речення)
	long long spent_time; // витрачений час на введення речення
	long long total_enter_time = 0; // загальний час вводу всіх букв
	bool previous_match = false; // для перевірки чи попередній ввід був правильний
	bool on_time = false; // для перевірки чи попередній ввід був вчасний

	while(getline(text_file, next_sentence)){ // пройтися по всім реченням твору
		system("CLS"); // очистити консоль
		srand(time(NULL));
		if (total_chars != 0) { // якщо не перший ввід (при першому вводі загальна кількість букв == 0)
			if (on_time) { // якщо вчасно
				if (previous_match) { // якщо правильний ввід
					cout << "Попереднє введення: ПРАВИЛЬНО" << endl;
				}
				else { // вчасно, неправильний ввід
					cout << "Попереднє введення: НЕПРАВИЛЬНО" << endl << "введено:" << input << endl << "очікувалося: " << next_sentence << "'" << endl;
				}
			}
			else { // якщо невчасно
				cout << "Попереднє речення було введено невчасно, витрачено " << spent_time << ", дозволено " << time_to_enter / 0.95 << endl;
			}
		}
		else { // якщо перший ввід 
			cout << endl;
		}
		input = "\0"; // для занулення попереднього введеного тексту
		cout << "Введіть речення: '" << endl << next_sentence << "'" << endl; // вивести підказку та комбінацію

		high_resolution_clock::time_point before = high_resolution_clock::now(); // запам'ятати час до введення
		for (size_t i = 0; i < next_sentence.length(); ++i) { // введення комбінації
			input_char = _getch(); // отримати наступний символ з консолі
			input += input_char; // додати до поточного введеня комбінації введений символ
			cout << input_char; // вивести введений символ
		}
		high_resolution_clock::time_point after = high_resolution_clock::now(); // запам'ятати час після введення

		spent_time = floor<milliseconds>(after - before).count(); // порахувати час введення
		total_enter_time += spent_time; // збільшити загальний час введення
		
		time_to_enter = next_sentence.length() * 400; // на кожен символ виділяється 400 мілісекунд
		if (time_to_enter > spent_time) { // якщо вчасно введено
			on_time = true; // встановити прапорець чи вчасний ввід true
			previous_match = true; // встановити прапорець чи правильний ввід true
			for (int i = 0; i < next_sentence.length(); ++i) { // перевірити співпадіння кожного символу
				if (input[i] == next_sentence[i]) { // якщо символи однакові
					++matched_chars; // збільшити лічильник правильно введених букв на 1
				}
				else { // якщо символи різні
					previous_match = false; // встановити прапорець чи правильний ввід false
				}
			}
		}
		else { // встановити прапорець чи вчасний ввід false
			on_time = false;
		}
		total_chars += next_sentence.length(); // збільшити загальну кількість введених символів
	} 

	Training::printResults(matched_chars, total_chars, total_enter_time); // вивести результати
	text_file.close(); // закриття файлу твору
}

/*
	Функція отримання з масиву речень одне речення. Оскільки функція використовує генератор, то речення в
	процесі виконання може повернутися більше одного разу (ймовірність отримати речення два рази підряд 0.16%)
*/
string TextTraining::getRandText() {
	return SENTENCES[rand() % 25];
}
